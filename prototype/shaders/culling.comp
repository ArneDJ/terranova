#version 460 core

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct IndexedIndirectCommand {
	uint index_count;
	uint instance_count;
	uint first_index;
	uint vertex_offset;
	uint first_instance;
};

layout (std430, binding = 0) writeonly buffer DrawCommandsBlock
{
	IndexedIndirectCommand indirect_draws[];
};

struct PaddedTransform {
	vec4 position;
	vec4 rotation;
	vec4 scale;
};

layout (std430, binding = 1) readonly buffer PaddedTransformBlock
{
	PaddedTransform padded_transforms[];
};

layout (std430, binding = 2) buffer ModelMatricesBlock
{
	mat4 model_matrices[];
};

layout (binding = 3) uniform CullShapeBlock {
	vec4 sphere; // xyz: center position, w: radius
} cull_shape;

layout (binding = 4) uniform CameraBlock {
	mat4 view;
	mat4 projection;
	mat4 view_projection;
	vec4 position;
	vec4[6] frustum_planes;
} camera;

bool sphere_intersection(vec4 pos, float radius)
{
	for (int i = 0; i < camera.frustum_planes.length(); i++) {
		if (dot(pos, camera.frustum_planes[i]) + radius < 0.0) {
			return false;
		}
	}

	return true;
}

mat4 quat_to_matrix(vec4 q)
{
	mat4 matrix = mat4(1.0);

	float qxx = q.x * q.x;
	float qyy = q.y * q.y;
	float qzz = q.z * q.z;
	float qxz = q.x * q.z;
	float qxy = q.x * q.y;
	float qyz = q.y * q.z;
	float qwx = q.w * q.x;
	float qwy = q.w * q.y;
	float qwz = q.w * q.z;

	matrix[0][0] = 1.0 - 2.0 * (qyy +  qzz);
	matrix[0][1] = 2.0 * (qxy + qwz);
	matrix[0][2] = 2.0 * (qxz - qwy);

	matrix[1][0] = 2.0 * (qxy - qwz);
	matrix[1][1] = 1.0 - 2.0 * (qxx +  qzz);
	matrix[1][2] = 2.0 * (qyz + qwx);

	matrix[2][0] = 2.0 * (qxz + qwy);
	matrix[2][1] = 2.0 * (qyz - qwx);
	matrix[2][2] = 1.0 - 2.0 * (qxx +  qyy);

	return matrix;
}

mat4 transform_to_matrix(vec3 position, vec4 rotation, vec3 scale)
{
	mat4 T = mat4(1.0);
	T[3] = vec4(position, 1.0);

	mat4 R = quat_to_matrix(rotation);

	mat4 S = mat4(1.0);
	S[0][0] = scale.x;
	S[1][1] = scale.y;
	S[2][2] = scale.z;

	return T * R * S;
}

float max_component(vec3 components)
{
	return max(components.x, max(components.y, components.z));
}

void main()
{
	uint idx = gl_GlobalInvocationID.x;

	PaddedTransform padded = padded_transforms[idx];

	mat4 model_matrix = transform_to_matrix(padded.position.xyz, padded.rotation, padded.scale.xyz);

	// transform the bounding sphere with the model matrix
	vec4 sphere_center = model_matrix * vec4(cull_shape.sphere.xyz, 1.0);
	float sphere_radius = cull_shape.sphere.w * max_component(padded.scale.xyz);

	if (sphere_intersection(sphere_center, sphere_radius)) {
		indirect_draws[idx].instance_count = 1;
		model_matrices[idx] = model_matrix;
	} else {
		indirect_draws[idx].instance_count = 0;
	}
}

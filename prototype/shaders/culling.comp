#version 460 core

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct IndexedIndirectCommand {
	uint index_count;
	uint instance_count;
	uint first_index;
	uint vertex_offset;
	uint first_instance;
};

layout (std430, binding = 0) writeonly buffer DrawCommandsBlock
{
	IndexedIndirectCommand indirect_draws[];
};

struct PaddedTransform {
	vec4 position;
	vec4 rotation;
	vec4 scale;
};

layout (std430, binding = 1) readonly buffer PaddedTransformBlock
{
	PaddedTransform padded_transforms[];
};

layout (std430, binding = 2) writeonly buffer ModelMatricesBlock
{
	mat4 model_matrices[];
};

layout (binding = 3) uniform CameraBlock {
	vec4 frustum_planes[6];
} camera;

bool sphere_intersection(vec4 pos, float radius)
{
	for (int i = 0; i < camera.frustum_planes.length(); i++) {
		if (dot(pos, camera.frustum_planes[i]) + radius < 0.0) {
			return false;
		}
	}

	return true;
}

void main()
{
	uint idx = gl_GlobalInvocationID.x;

	vec4 position = padded_transforms[idx].position;

	if (sphere_intersection(position, position.w)) {
		indirect_draws[idx].instance_count = 1;
		model_matrices[idx][3] = position;
	} else {
		indirect_draws[idx].instance_count = 0;
	}
}
